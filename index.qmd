---
format: dashboard
---

```{r}
#| label: setup

options(digits = 1)

librarian::shelf(
  tidyverse, here, epoxy, quanteda, tidytext, spacyr, glue, gt,
  printr, corpustools, quanteda.textstats, quanteda.textplots, ggh4x, crosstalk
)
use_epoxy_glue_engine()
source("_common.R")
```

```{r}
#| label: load-data

data <- read_csv(here("data", "plans-text.csv"))

data(stop_words)

tokens <-
  arrow::read_parquet(here("data/spacy-tokens.parquet")) |>
  filter(!(pos %in% c("NUM", "PUNCT", "X", "SYM"))) |>
  anti_join(stop_words |> filter(lexicon == "snowball"), by = c("token" = "word"))
```


```{r}
#| label: make-dictionary

terms <-
  read_csv(here::here("data/search_terms.csv")) %>%
  rename_with(~ janitor::make_clean_names(.x), everything()) %>%
  pivot_longer(matches("search_term"),
    names_to = "search_term_number",
    names_prefix = "search_term_",
    values_to = "search_term"
  ) %>%
  drop_na(search_term) %>%
  summarise(
    search_terms = str_flatten(search_term, collapse = ", ") %>%
      str_trim() |> str_split(", "),
    .by = c("pattern", "concept")
  ) |>
  mutate(
    pattern = str_to_title(pattern),
    pattern = case_match(pattern,
      "Lgbtq+" ~ "LGBTQ+",
      "Aapi" ~ "AAPI",
      "Ai" ~ "AI",
      "Poc" ~ "POC",
      .default = pattern
    )
  )

terms_pattern <- set_names(terms$search_terms, terms$pattern)
# Create dictionary
dict <- dictionary(as.list(terms_pattern))
```

```{r}
#| label: universe-search
#| echo: false

# Perform a KWIC search on our tokens
# We specify a window of 10 words on either side of the keyword.
# We then convert the result into a tibble, remove unnecessary columns,
# and move the 'pattern' column (which contains the keywords) after the 'docname' column.
# Finally, we join the result with our dictionary to append the search terms to the results.


universe_search <-
  kwic(as.tokens(tokens, use_lemma = TRUE), dict, window = 10) |>
  as_tibble() |>
  select(-c(from, to)) |>
  relocate(pattern, .after = "docname") |>
  left_join(make_dict_tidy(dict), by = c("pattern"))
```

# Browser Tool 

## Row {height=100%}


```{r}
#| label: browser-search-tool
#| echo: false


data_collapsed <-
  data |>
  mutate(layout_type_and_number = if_else(str_detect(
    layout_type_and_number,
    "part of layout list"
  ),
  str_remove(layout_type_and_number, "Text \\d+ - "),
  layout_type_and_number
  )) |>
  summarise(
    text = str_c(text, collapse = " \n "),
    .by = c("year", "agency", "layout_type_and_number", "page_number")
  ) |>
  mutate(agency = str_remove(agency, "-equity-action-plan") |> str_to_upper()) |>
  mutate(doc_id = str_c(year, layout_type_and_number, sep = " ") |> str_to_title() %>% str_c(agency, " ", .)) |>
  rename_with(~ str_to_title(str_replace_all(.x, "_", " ")), -c(doc_id, text))

corpus_collapsed <- corpus(data_collapsed, docid_field = "doc_id", text_field = "text")

corpus_collapsed_detailed <-
  corpus_collapsed |>
  as_tibble_col(column_name = "text") |>
  bind_cols(docnames(corpus_collapsed) |>
    as_tibble_col(column_name = "doc_id")) |>
  bind_cols(docvars(corpus_collapsed)) |>
  mutate(doc_id = str_remove(doc_id, "-equity-action-plan|-fwk-for-health-equity"))

tc <- create_tcorpus(corpus_collapsed_detailed,
  split_sentences = TRUE,
  max_sentences = Inf,
  meta = c("agency", "year", "layout_type_and_number", "page_number")
)
hits <- search_dictionary(tc, dict, ascii = TRUE, mode = "unique_hits")

browse_hits(tc,
  hits,
  filename = here("topic-browser.html"),
  view = FALSE,
  header = "All Keywords",
  n = Inf,
  meta_cols = c("Agency", "Year", "Layout Type And Number", "Page Number"),
  seed = 999
)
```

```{r}
#| label: modular-tabs

create_tabset <- function(dict, title, filename) {
  # Create tcorpus and search for hits
  tc <- create_tcorpus(corpus_collapsed_detailed,
    split_sentences = TRUE,
    max_sentences = Inf,
    meta = c("Agency", "Year", "Layout Type And Number", "Page Number"),
  )
  hits <- search_dictionary(tc, dict, ascii = TRUE, mode = "unique_hits")

  # Browse hits and save to file
  browse_hits(tc,
    hits,
    filename = filename,
    view = FALSE,
    header = title,
    n = Inf,
    meta_cols = c("Agency", "Year", "Layout Type And Number", "Page Number"),
    seed = 999
  )

  # Return HTML code for iframe
}
```

:::: {.column-screen}
::: panel-tabset


### All Keywords

```{=html}
<iframe width="100%" height="100%" src="topic-browser.html" title="Webpage example"></iframe>
```

### Equity Types

```{r}
dict_equity_types <- dict[1:3]
tabset_equity_types <- create_tabset(dict_equity_types, "Equity Types", "topic-browser-equity-types.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-equity-types.html" title="Webpage example"></iframe>
```

### Metrics 

```{r}
dict_metrics <- dict[4:8]
tabset_metrics <- create_tabset(dict_metrics, "Metrics", "topic-browser-metrics.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-metrics.html" title="Webpage example"></iframe>
```

### Legislation 

```{r}
dict_legislation <- dict[9:14]
tabset_legislation <- create_tabset(dict_legislation, "Legislation", "topic-browser-legislation.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-legislation.html" title="Webpage example"></iframe>
```

### Underserved Communities

```{r}
dict_underserved_communities <- dict[18:34]
tabset_underserved_communities <- create_tabset(dict_underserved_communities, "Underserved Communities", "topic-browser-underserved-communities.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-underserved-communities.html" title="Webpage example"></iframe>
```

### Data

```{r}
dict_data <- dict[c(36, 37, 41:43)]
tabset_data <- create_tabset(dict_data, "Data", "topic-browser-data.html")

# Note dissagregation (index 36) seems to have zero hits
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-data.html" title="Webpage example"></iframe>
```

### Procurement

```{r}
dict_procurement <- dict[c(48:49)]
tabset_procurement <- create_tabset(dict_procurement, "Procurement", "topic-browser-procurement.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-procurement.html" title="Webpage example"></iframe>
```


### Other 
```{r}
dict_misc <- dict[c(15:17, 35, 38:40, 44:47)]
tabset_misc <- create_tabset(dict_misc, "Miscellaneous", "topic-browser-misc.html")
```

```{=html}
<iframe width="100%" height="100%" src="topic-browser-misc.html" title="Webpage example"></iframe>
```


:::
::::

# Dictionary

```{r}
#| label: dictionary



add_quotes <- function(x) {
  # Add quotes around terms
  quoted <- str_replace_all(x, "\\b([^,]+)\\b", "'\\1'")

  # Remove quotes around 'and'
  final <- str_replace_all(quoted, "'and'", "and")

  return(final)
}

capitalize_terms <- c(
  "arpa", "iija", "ira", "j40", "cejst",
  "ej", "cj",
  "cdo",
  "asl",
  "Aapi",
  "aanhpi",
  "nh",
  "lgbtq",
  "lgbtqia",
  "lgbt",
  "lgbtqi",
  "ai"
)

# Create a named vector where the names are the terms to replace and the values are the replacements
replacements <- set_names(str_to_upper(capitalize_terms), capitalize_terms)


dict_tidy <-
  make_dict_tidy(dict) |>
  left_join(terms |> select(-search_terms),
    by = c("pattern")
  ) |>
  distinct(search_terms, .keep_all = TRUE) |>
  mutate(
    search_terms = str_to_sentence(search_terms),
    search_terms = str_replace(search_terms, "(.*),([^,]*)$", "\\1, and\\2")
  ) |>
  mutate(
    search_terms = map_chr(search_terms, add_quotes),
    search_terms = str_replace(search_terms, "'and ", "and '"),
    search_terms = str_replace_all(search_terms, "'\\*", "\\*'")
  ) |>
  mutate(search_terms = str_replace_all(search_terms, replacements)) |>
  mutate(concept = case_match(pattern,
    c(
      "Accountability",
      "Barriers",
      "Chief Data Officer",
      "Climate",
      "Collaboration",
      "Community Engagement",
      "Customer Service",
      "Knowledge",
      "Language Accessibility",
      "Staff Experience",
      "Teams"
    ) ~ "Other",
    c("Data", "AI", "Analyze", "Disaggregation", "Disaggregation_plus") ~ "Data",
    c("Procurement", "Budget") ~ "Procurement",
    .default = concept
  ))
```

```{r}
make_dict_table <- function(concept) {
  tbl <-
    dict_tidy |>
    filter(concept == {{ concept }}) |>
    select(-concept) |>
    gt() |>
    gt::cols_label_with(everything(), ~ str_to_title(.x) |> str_replace("_", " ")) |>
    tab_header(title = glue("{concept} Keywords")) |>
    tab_source_note(md('**Note:** Search terms are not case-sensitive and those ending with an "\\*" match words that start with the same characters. For instance, "Hispanic*" matches with "Hispanics", "Hispanic-serving", and "Hispanic-owned".')) |>
    my_theme() |>
    opt_interactive()

  return(tbl)
}
```

:::: {.column-screen}
::: panel-tabset

## All Keywords

```{r}
dict_tidy |>
  select(concept, pattern, search_terms) |>
  gt() |>
  gt::cols_label_with(everything(), ~ str_to_title(.x) |> str_replace("_", " ")) |>
  tab_header(title = glue("All Keywords")) |>
  tab_source_note(md('**Note:** Search terms are not case-sensitive and those ending with an "\\*" match words that start with the same characters. For instance, "Hispanic*" matches with "Hispanics", "Hispanic-serving", and "Hispanic-owned".')) |>
  my_theme() |>
  opt_interactive()
```

```{r}
#| label: concept-ordering

# Specify the order of the levels
concepts_order <- c("Equity Types", "Metrics", "Legislation", "Underserved Communities", "Data", "Procurement", "Other")

# Convert the 'concept' column to an ordered factor with the specified order

dict_tidy <-
  dict_tidy |>
  mutate(concept = str_to_title(concept)) |>
  arrange(fct_relevel(concept, concepts_order))
```

```{r}
#| results: asis
#| fig-width: 14
#| fig-height: 6

res <- purrr::map_chr(unique(dict_tidy$concept), \(x) {
  knitr::knit_child(text = c(
    "## `r x`",
    "",
    "```{r}",
    "#| echo: false",
    "make_dict_table(x)",
    "```",
    "",
    ""
  ), envir = environment(), quiet = TRUE)
})

cat(res, sep = "\n")
```

:::
::::
